{"version":3,"sources":["Components/Header/Header.js","Components/myBooks/bookCard.js","Components/myBooks/FormContainer.js","Components/myBooks/addBooks.js","Redux/actionCreator.js","Components/Header/About.js","Components/Header/Contact.js","Components/myBooks/moreInfo.js","Components/myBooks/Main.js","App.js","serviceWorker.js","Redux/rootReducer.js","index.js"],"names":["Header","react_default","a","createElement","className","Link","to","BookCard","this","props","changeIsOpen","index","authors","undefined","bookInfo","volumeInfo","join","key","id","state","title","onClick","toggleOpen","bind","src","imageLinks","smallThumbnail","alt","pathname","Info","React","Component","FormContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","userInput","e","val","target","value","setState","preventDefault","handleFetch","onSubmit","_handleSubmit","htmlFor","type","placeholder","onChange","handleChange","AddBooks","listIsOpen","assertThisInitialized","_this2","console","log","ref","split","fetch","then","response","json","data","changeSearch","items","newListIsOpen","i","_this3","FormContainer_FormContainer","userSearch","map","info","bookCard_BookCard","connect","reduxState","newSearch","About","Contact","MoreInfo","location","thumbnail","pageCount","description","Main","Switch","Route","exact","path","component","addBooks","App","Components_Header_Header","myBooks_Main","Boolean","window","hostname","match","initialState","store","createStore","arguments","length","action","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8f06080.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className = \"header-container\">\r\n            <div>\r\n                <Link to = \"/about\">About</Link>\r\n            </div>\r\n            <div>\r\n                <Link to = \"/contact\">Contact</Link>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './style.css'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nexport default class BookCard extends React.Component {\r\n    toggleOpen (){\r\n        this.props.changeIsOpen(this.props.index)\r\n    }\r\n\r\n    render(){\r\n        let authors\r\n        if(this.props.bookInfo.volumeInfo.authors === undefined){\r\n            authors = 'No Author'\r\n        } else {\r\n            authors = this.props.bookInfo.volumeInfo.authors.join(\", \")\r\n        }\r\n        return(\r\n            <div className = 'individual-book-container' key = {this.props.bookInfo.volumeInfo.id}>\r\n\r\n            {!this.props.state && (\r\n                <div className = 'book-title'>\r\n                    <div \r\n                    key = {this.props.bookInfo.volumeInfo.id}\r\n                    className = \"inner-book-name\" >\r\n\r\n                        {this.props.bookInfo.volumeInfo.title}\r\n\r\n                    </div>\r\n\r\n                    <button\r\n                    className = 'expand-button'\r\n                    onClick = {this.toggleOpen.bind(this)}>\r\n                        Expand\r\n                    </button>\r\n                </div>\r\n            )}\r\n\r\n            {this.props.state && (\r\n                <div \r\n                key = {this.props.bookInfo.volumeInfo.id} \r\n                className = \"book-card\" >\r\n\r\n                    <div>\r\n                        <img src = {this.props.bookInfo.volumeInfo.imageLinks.smallThumbnail} alt = 'No book cover'></img>\r\n                    </div>\r\n                    <div>\r\n                        <h4> {this.props.bookInfo.volumeInfo.title} </h4>\r\n                        <h6> {authors} </h6>\r\n\r\n                        <Link to = {{\r\n                            pathname: '/info',\r\n                            state: {\r\n                                Info: this.props.bookInfo\r\n                            }\r\n                        }}>More...</Link>\r\n                        <br/>\r\n                        <br/>\r\n                        <button\r\n                            className = 'expand-button'\r\n                            onClick = {this.toggleOpen.bind(this)}>\r\n                                Contract\r\n                        </button>\r\n\r\n                    </div>\r\n                </div>\r\n            )}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default class FormContainer extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            userInput: ''\r\n        }\r\n    }\r\n\r\n    handleChange (e){\r\n        let val = e.target.value\r\n        this.setState({ userInput: val })\r\n    }\r\n    _handleSubmit(e){\r\n        e.preventDefault()\r\n        this.props.handleFetch(this.state.userInput)\r\n    }\r\n\r\n    render(){\r\n    return (\r\n        <div>\r\n            <form onSubmit = {this._handleSubmit.bind(this)}>\r\n                    \r\n                <label htmlFor = 'books-name'>Name:  </label>\r\n                <input\r\n                id = 'books-name'  \r\n                type = \"text\" \r\n                placeholder = \"Book's name\" \r\n                onChange = {this.handleChange.bind(this)}\r\n                value = {this.state.userInput} />   \r\n                \r\n\r\n                <input type =\"submit\" value = \"Search\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n}","import React from 'react'\r\nimport './style.css'\r\nimport BookCard from './bookCard'\r\nimport { connect } from 'react-redux'\r\nimport  {changeSearch} from '../../Redux/actionCreator'\r\nimport FormContainer from './FormContainer'\r\n\r\nclass AddBooks extends React.Component {\r\n    constructor (props){\r\n        super(props)\r\n        this.state = { \r\n            listIsOpen: [false,false,false,false,false,false,false,false,false,false]\r\n         }\r\n\r\n    this.handleFetch = this.handleFetch.bind(this)\r\n    }\r\n\r\n\r\n    handleFetch (userInput){\r\n        console.log(this.props)\r\n        let ref = userInput.split(\" \").join(\"+\")\r\n        let search = \"https://www.googleapis.com/books/v1/volumes?q=\" + ref\r\n        fetch(search)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(this.props)\r\n                this.props.changeSearch(data.items)})\r\n            .then(() => this.setState( { listIsOpen: [false,false,false,false,false,false,false,false,false,false] } ))\r\n\r\n    }\r\n\r\n    changeIsOpen (index){\r\n        let newListIsOpen = this.state.listIsOpen\r\n        newListIsOpen[index] = !newListIsOpen[index] \r\n        for(let i = 0; i < 10; i++){\r\n            if(i !== index) newListIsOpen[i] = false \r\n        }\r\n        this.setState( { listIsOpen: newListIsOpen } )\r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className = \"addBooks-container\">\r\n                \r\n                <FormContainer handleFetch = {this.handleFetch}/>\r\n\r\n                <div className = 'map-bookcard'>\r\n                    \r\n                    {this.props.userSearch.map((info, index) => (\r\n                        <BookCard \r\n                            key = {index}\r\n                            bookInfo = {info}\r\n                            index = {index}\r\n                            state = {this.state.listIsOpen[index]}\r\n                            changeIsOpen = {this.changeIsOpen.bind(this)}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction mapStateToProps (reduxState){\r\n    return  { userSearch: reduxState.userSearch } \r\n}\r\n\r\nexport default connect(mapStateToProps, { changeSearch })(AddBooks)","export function changeSearch(data){\r\n    return {\r\n        type: \"CHANGE_SEARCH\",\r\n        newSearch: data\r\n    }\r\n}","import React from \"react\"\r\n\r\n\r\nfunction About (){\r\n    return (\r\n        <div>\r\n            This is the About page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import React from \"react\"\r\n\r\n\r\nfunction Contact (){\r\n    return (\r\n        <div>\r\n            This is the Contact page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React from \"react\"\r\nimport './style.css'\r\n\r\nexport default class MoreInfo extends React.Component {\r\n\r\n    render (){\r\n        return (\r\n            <div className = 'moreInfo'>\r\n                <div>\r\n                    <img src = {this.props.location.state.Info.volumeInfo.imageLinks.thumbnail} alt = 'No book cover'></img>\r\n                </div>\r\n                \r\n                <div className = 'volume-info'>                \r\n                    <h4>{this.props.location.state.Info.volumeInfo.title}</h4>\r\n                    <span className = 'volume-author'>\r\n                    Author: {this.props.location.state.Info.volumeInfo.authors.join(', ')}\r\n                    </span>\r\n                    \r\n                    <span className  = 'volume-pages'>\r\n                    Pages: {this.props.location.state.Info.volumeInfo.pageCount}\r\n                    </span>\r\n                    <br/>\r\n                    <p>\r\n                        Description: {this.props.location.state.Info.volumeInfo.description}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport {Switch, Route} from 'react-router-dom'\r\nimport addBooks from './addBooks.js'\r\nimport About from '../Header/About.js'\r\nimport Contact from '../Header/Contact.js'\r\nimport MoreInfo from './moreInfo'\r\n\r\n\r\nfunction Main () {\r\n    return (\r\n        <Switch>\r\n            <Route exact path = '/' component = {addBooks}/>\r\n            <Route path = '/about' component = {About}/>\r\n            <Route path = '/contact' component = {Contact}/>\r\n            <Route path = '/info' component = {MoreInfo}/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Main","\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Header/Header.js'\r\nimport Main from './Components/myBooks/Main'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header/>\r\n        <Main/>  \r\n      </div> \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initialState = { userSearch: [] }\r\n\r\n\r\nexport default function rootReducer (state = initialState, action){\r\n    switch(action.type){\r\n        case \"CHANGE_SEARCH\":\r\n            return { userSearch: action.newSearch }\r\n\r\n        default: return state\r\n        }\r\n\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport rootReducer from './Redux/rootReducer'\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nReactDOM.render(\r\n<Provider store = {store}>\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>\r\n</Provider>,\r\n document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}